---
const { backgroundUrl, speed = 0.5, height = "100vh" } = Astro.props;
---

<div
  class="parallax-container"
  style={`height: ${height}; border:1px solid white`}
>
  <div
    class="parallax-background"
    style={`background-image: url(${backgroundUrl});`}
    id="imagediv"
  >
  </div>
  <div class="vignette"></div>
  <div class="content flex flex-col h-full" style="z-index:20">
    <slot />
  </div>
</div>

<style define:vars={{ speed }}>
  .parallax-container {
    position: relative;
    width: 100%;
    overflow: hidden;
  }

  .parallax-background {
    position: absolute;
    top: -50%;
    left: 0;
    right: 0;
    bottom: -50%;
    z-index: 10;
    background-position: center;
    background-repeat: no-repeat;
    background-size: cover;
    transform: translateY(0);
    will-change: transform;
  }

  .content {
    position: relative;
    z-index: 1;
    color: white;
    text-align: center;
    padding: 20px;
  }

  .vignette {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    box-shadow: 0 0 200px rgba(0, 0, 0, 0.9) inset;
    z-index: 15;
    pointer-events: none;
  }

  @media (prefers-reduced-motion: no-preference) {
    .parallax-background {
      transform: translateY(calc(var(--scrollY, 0) * var(--speed) * -0.5px));
    }
  }
</style>

<script>
  const parallaxElements = document.querySelectorAll(".parallax-background");

  function updateParallax() {
    parallaxElements.forEach((el) => {
      const container = el.closest(".parallax-container");
      const rect = container.getBoundingClientRect();
      const scrollProgress =
        (window.scrollY - rect.top) / (rect.height - window.innerHeight);
      const scrollY = scrollProgress * rect.height;
      (el as HTMLElement).style.setProperty("--scrollY", scrollY.toString());
    });
  }

  window.addEventListener("scroll", updateParallax);
  window.addEventListener("resize", updateParallax);
  updateParallax();
</script>
